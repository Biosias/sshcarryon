#!/bin/bash

die() { 
        echo -e " ${NOCOLOR-\e[1;31m*\e[0m }${*}" >&2
        exit 1
}       

setup_sshc_connection() {
	
	${ssh_command} "exit" || die "Unable to connect"
	
	# Create directory on remote machine where all tools will be copied
	${ssh_command} "mkdir -p ${workdir}/bin -m 700"
		
	# Copy all from toolbox directory
	scp -r ${sshoptions} ${toolbox_location}/. ${ssh_remote_host}:${workdir}/ &>/dev/null
		
	# Copy sshc to the remote machine so it can be used from it as well
	scp ${sshoptions} ${script_location} ${ssh_remote_host}:${workdir}/bin/ &>/dev/null
		
	# Make all binaries in bin executable
	${ssh_command} "chmod 700 -R ${workdir}/bin"

}

initiate_sshc_connection() {
	
	# Initiate sshc connection while sourcing rc file uploaded by sshc
	${ssh_command} -t "bash --rcfile ${workdir}/.bashrc" || die "Unable to open shell"

}

end_sshc_connection() {

	# Clean the working directory when last sshc connection ends
	${ssh_command} "rm -rf ${workdir}"

}

script_location="$(realpath ${0})"

# Point it to directory with your tools you want to take with you
toolbox_location="$(echo ${script_location} | sed -E 's:[^\/]*$::g')/toolbox"

# Use ssh multiplexing to allow multiple ssh instaces through single connection
ssh_remote_host="${1}"
ssh_options='-o ControlPath=~/.ssh/cm-%r@%h:%p -o ControlMaster=auto -o ControlPersist=2m'
ssh_command="ssh ${ssh_remote_host} ${ssh_options}"
workdir=".sshcarryon"

if [[ "${1}" == *"@"* ]]; then

	[[ -n $(ps aux | grep -e "ssh.*${1}.*${workdir}" | grep -v grep) ]] || setup_sshc_connection

	initiate_sshc_connection

	[[ -n $(ps aux | grep -e "ssh.*${1}.*${workdir}" | grep -v grep) ]] && end_sshc_connection
	
else

	die "Argument needs to be valid ssh target"

fi
